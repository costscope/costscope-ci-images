name: build-publish

on:
  workflow_dispatch:
    inputs:
      syft_version:
        description: "Syft version to install (e.g., v1.18.0)"
        required: false
        default: "v1.18.0"
      grype_version:
        description: "Grype version to install (e.g., v0.69.1)"
        required: false
        default: "v0.69.1"
      severity_threshold:
        description: "Grype fail-on severity (critical|high|medium|low|negligible|unknown)"
        required: false
        default: "critical"
      only_fixed:
        description: "Grype: report only fixed vulns (true|false)"
        required: false
        default: "true"
      platforms:
        description: "Docker build platforms (comma-separated)"
        required: false
        default: "linux/amd64,linux/arm64"
  schedule:
    - cron: "0 3 * * 1"
  push:
    branches:
      - main
    tags:
      - "v*"
    paths:
      - base/**
      - Makefile
      - .github/workflows/build-publish.yml

permissions:
  contents: read
  packages: write
  id-token: write

env:
  REG: ghcr.io/${{ github.repository_owner }}
  PLATFORMS: linux/amd64,linux/arm64
  IS_ACT: "false"
  SYFT_VERSION: v1.18.0
  GRYPE_VERSION: v0.69.1
  BASE_IMAGE: ubuntu:22.04
  GO_VERSION: 1.24.3
  COSIGN_VERSION: v2.2.4
  TRIVY_VERSION: 0.56.2
  GITLEAKS_VERSION: 8.18.4
  GOSEC_VERSION: 2.21.4
  GOVULNCHECK_VERSION: 1.1.3

concurrency:
  group: costscope-ci-images-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-base:
    needs: [lint-sh]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Load versions.env
        run: |
          if [ -f versions.env ]; then
            echo "Loading versions.env";
            sed -n 's/^\([^#][A-Z0-9_]*\)=.*/\1/p' versions.env | while read -r k; do
              v=$(grep -E "^${k}=" versions.env | sed 's/^[^=]*=//');
              echo "$k=$v" >> "$GITHUB_ENV";
            done
          fi
      - if: env.IS_ACT != 'true'
        uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: Detect act
        run: |
          if [ "${ACT:-}" = "true" ] || [ "${IS_ACT:-}" = "true" ]; then
            echo "IS_ACT=true" >> "$GITHUB_ENV"
          fi
      - name: Adjust platforms for act
        if: env.IS_ACT == 'true'
        run: |
          echo "PLATFORMS=linux/amd64" >> "$GITHUB_ENV"
      - name: Override tool versions (workflow_dispatch)
        if: github.event_name == 'workflow_dispatch' && env.IS_ACT != 'true'
        run: |
          # Override defaults from dispatch inputs (values always present due to defaults)
          echo "SYFT_VERSION=${{ inputs.syft_version }}" >> "$GITHUB_ENV"
          echo "GRYPE_VERSION=${{ inputs.grype_version }}" >> "$GITHUB_ENV"
          echo "PLATFORMS=${{ inputs.platforms }}" >> "$GITHUB_ENV"
          echo "GRYPE_FAIL_ON=${{ inputs.severity_threshold }}" >> "$GITHUB_ENV"
          echo "GRYPE_ONLY_FIXED=${{ inputs.only_fixed }}" >> "$GITHUB_ENV"
      - name: Compute tags
        id: meta
        env:
          IMAGE: ci-base
        run: |
          set -euo pipefail
          TAGS="${REG}/${IMAGE}:latest"
          DATE_UTC=$(date -u +%Y.%m.%d)
          SHORT_SHA=${GITHUB_SHA::8}
          TAGS+=$'\n'"${REG}/${IMAGE}:${DATE_UTC}-${SHORT_SHA}"
          if [[ "${GITHUB_REF_TYPE:-}" == "tag" ]] && [[ "${GITHUB_REF_NAME:-}" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR="${BASH_REMATCH[1]}"; MINOR="${BASH_REMATCH[2]}"; PATCH="${BASH_REMATCH[3]}"
            TAGS+=$'\n'"${REG}/${IMAGE}:v${MAJOR}.${MINOR}.${PATCH}"
            TAGS+=$'\n'"${REG}/${IMAGE}:v${MAJOR}.${MINOR}"
            TAGS+=$'\n'"${REG}/${IMAGE}:v${MAJOR}"
          fi
          {
            echo "tags<<EOF"
            echo "$TAGS"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
      - name: Login GHCR
        if: ${{ env.IS_ACT != 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & push base (CI)
        if: env.IS_ACT != 'true'
        id: base
        uses: docker/build-push-action@v6
        with:
          context: ./base
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          platforms: ${{ env.PLATFORMS }}
          provenance: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BASE_IMAGE=${{ env.BASE_IMAGE }}
            GO_VERSION=${{ env.GO_VERSION }}
            SYFT_VERSION=${{ env.SYFT_VERSION }}
            COSIGN_VERSION=${{ env.COSIGN_VERSION }}
            TRIVY_VERSION=${{ env.TRIVY_VERSION }}
            GITLEAKS_VERSION=${{ env.GITLEAKS_VERSION }}
            GOSEC_VERSION=${{ env.GOSEC_VERSION }}
            GOVULNCHECK_VERSION=${{ env.GOVULNCHECK_VERSION }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
      - name: Install syft & grype (pinned)
        if: ${{ env.IS_ACT != 'true' }}
        run: |
          set -euo pipefail
          chmod +x scripts/install-syft-grype.sh
          ./scripts/install-syft-grype.sh "${SYFT_VERSION}" "${GRYPE_VERSION}"
      - name: Summarize tool versions
        if: ${{ env.IS_ACT != 'true' }}
        run: |
          {
            echo "### Tool versions"
            syft version | sed 's/^/- /'
            grype version | sed 's/^/- /'
          } >> "$GITHUB_STEP_SUMMARY"
      - name: Generate SBOM (base)
        if: ${{ env.IS_ACT != 'true' }}
        run: |
          set -euo pipefail
          IMAGE_TAG="${{ env.REG }}/ci-base:latest"
          chmod +x scripts/syft-generate-spdx.sh
          ./scripts/syft-generate-spdx.sh "$IMAGE_TAG" sbom-ci-base.spdx.json
      - name: Generate SBOM (base, OS-only)
        if: ${{ env.IS_ACT != 'true' }}
        run: |
          set -euo pipefail
          IMAGE_TAG="${{ env.REG }}/ci-base:latest"
          chmod +x scripts/syft-generate-os-only.sh
          ./scripts/syft-generate-os-only.sh "$IMAGE_TAG" sbom-ci-base-os.syft.json
      - name: Vulnerability scan (base, SPDX)
        if: ${{ env.IS_ACT != 'true' }}
        env:
          GRYPE_CHECK_FOR_APP_UPDATE: "false"
          GRYPE_FAIL_ON: ${{ env.GRYPE_FAIL_ON }}
          GRYPE_ONLY_FIXED: ${{ env.GRYPE_ONLY_FIXED }}
        run: |
          set -euo pipefail
          chmod +x scripts/grype-scan-sbom.sh
          GRYPE_JSON_OUT=grype-ci-base.json ./scripts/grype-scan-sbom.sh sbom-ci-base.spdx.json
      - name: Upload SBOM artifact (base)
        if: ${{ always() && env.IS_ACT != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: sbom-ci-base
          path: sbom-ci-base.spdx.json
      - name: Upload Grype report (base)
        if: ${{ always() && env.IS_ACT != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: grype-ci-base
          path: grype-ci-base.json
      - name: Upload SBOM artifact (base, OS-only)
        if: ${{ always() && env.IS_ACT != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: sbom-ci-base-os
          path: sbom-ci-base-os.syft.json
      - name: Upload SBOM bundle
        if: ${{ always() && env.IS_ACT != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: sbom-bundle
          path: |
            sbom-ci-base.spdx.json
            sbom-ci-base-os.syft.json
            grype-ci-base.json
      - name: Summarize digest (base)
        if: env.IS_ACT != 'true'
        run: echo "ci-base@${{ steps.base.outputs.digest }}" >> "$GITHUB_STEP_SUMMARY"

  lint-sh:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Install shellcheck
        run: sudo apt-get update && sudo apt-get install -y shellcheck
      - name: Run shellcheck
        run: shellcheck -x scripts/*.sh base/scripts/*.sh
